services:
  cockroachdb:
    image: "cockroachdb/cockroach:v23.1.13"
    stop_grace_period: 1m
    deploy:
      mode: "global"
      placement:
        constraints:
          - "engine.labels.role == db-worker"
      update_config:
        order: start-first
        failure_action: rollback
        parallelism: 1
      restart_policy:
        condition: on-failure
        delay: 5s
    environment:
      ALLOW_EMPTY_PASSWORD: "yes"
      COCKROACH_MAX_OFFSET: "500ms"
      # SWARM_HOSTNAME: "{{.Node.Hostname}}"
    networks:
      - "swarm"
    volumes:
      - "cockroachdb:/cockroach/cockroach-data"
      - "/bfbackup:/cockroach/cockroach-data/extern"
      # These directories have to be created first
      # - type: bind
      #   source: "/{{.Service.Name}}-data-{{.Task.Slot}}"
      #   target: "/cockroach/cockroach-data"
    configs:
      - source: "start-db"
        target: "/docker-entrypoint.sh"
    entrypoint: [ "/bin/sh", "/docker-entrypoint.sh" ]

  cockroachdb-init:
    image: "cockroachdb/cockroach:v23.1.13"
    deploy:
      mode: "replicated-job"
      replicas: 1
      placement:
        constraints:
          - "engine.labels.role == db-worker"
    depends_on:
      - "cockroachdb"
    networks:
      - "swarm"
    configs:
      - source: "init-cluster"
        target: "/docker-entrypoint.sh"
    entrypoint: [ "/bin/sh", "/docker-entrypoint.sh" ]

configs:
  start-db:
    name: "start-db.sh-v${CFG:-0}"
    file: "./start-db.sh"
  init-cluster:
    name: "init-cluster.sh-v${CFG:-0}"
    file: "./init-cluster.sh"

volumes:
  cockroachdb:

networks:
  swarm:
    external: true
